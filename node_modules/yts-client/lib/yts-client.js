// dependency modules
var request = require('request');
var cdnaUtils = require('cdna-utils');

// shortcut for api in modules
var MapObject = cdnaUtils.MapObject;

// error message
// using to make uniformity error message 
var errorMessage = {
    parseBody: 'unable to convert body to json'
}

// default url to yts api
var apiUrl = {
    find: 'https://yts.ag/api/v2/list_movies.json',
    findById: 'https://yts.ag/api/v2/movie_details.json'
};

// default params for find()
var findParams = { pageSize: 32, pageIndex: 1 };

// movie properties map
// using for rename property in yts movie 
// object construct by <yts-name>: <new-name>
var movieMap = {imdb_code: 'imdb_id', 
    title: 'name', 
    year: 'year', 
    rating: 'rating', 
    runtime: 'runtime', 
    genres: 'genres', 
    description_full: 'notes', 
    yt_trailer_code: 'yt_trailer_code', 
    language: 'language', 
    small_cover_image: 'poster_sm', 
    medium_cover_image: 'poster_md', 
    large_cover_image: 'poster_lg', 
    state: 'state', 
    date_uploaded: 'date_created'
};

// torent map
// using for rename property in yts torrent
// object construct by <yts-name>: <new-name>
var torrentMap = {url: 'url', 
    hash: 'hash', 
    quality: 'quality', 
    seeds: 'seeds',
    size_bytes: 'size', 
    date_updated: 'date_created'
};

// movie converter 
// using for convert yts movie to new item
var movieConverter = new MapObject(movieMap);

// torrent converter
// using for convert torrent item in yts movie to new item
var torrentConverter = new MapObject(torrentMap);

// convert yts item to client item
// rename some properties, remove some properties
// params
//  - items: array of yts movies
// return array contain item is converted
function convertYtsMovie(items) { 
    
    // convert each yts item 
    var movies = [];
    items.forEach(function(item) { 
        
        // convert yts movie data to cdna data 
        var cdnaItem = movieConverter.convert(item); 

        // convert yts torrent 
        var torrents = item.torrents;
        if(!torrents) { return; }
        cdnaItem['torrents'] = [];
        torrents.forEach(function(torrent) {
            cdnaTorrent = torrentConverter.convert(torrent);
            cdnaItem.torrents.push(cdnaTorrent);
        }); 
        
        movies.push(cdnaItem);
    }); 
    
    return movies;
}

// yts movie client
// using to create new instance of yts movie client
// params
//  - api: object contain url to yts api
function YtsClient(api) { 
    var self = this; 
    self.api = api || apiUrl;
}

// shorcut for yts moive client prototype
var prototype = YtsClient.prototype;

// find movie with params
// params
//  - selector: object contain params for yts api
//    properties
//     - pageSize: number of item to find [1, 50]
//     - pageIndex: index of page
//     - quality: match with quality property: 720p, 1080p, 3D
//     - rating_min: minimum rating, [0, 9]
//     - term: ?
//     - genre: match with genre
//     - sort_by: sort by property
//     - order_by: desc, asc
//  - callback: function will call
//    params
//     - error: error occur during process if exist
//     - items: item match with selector
prototype.find = function(selector, callback) {

    // shortcut to this object
    var self = this;

    // convert selector to yts params
    var params = {};
    params.limit = selector.pageSize || findParams.pageSize;
    params.page = selector.pageIndex || findParams.pageIndex;
    params.quality = selector.quality || null;
    params.minimum_rating = selector.rating_min || null;
    params.genre = selector.genre || null;
    params.sort_by = selector.sort_by || null;
    params.order_by = selector.order_by || null;
    params.query_term = selector.term || null;

    // invoke yts api
    request({url: self.api.find, qs: params}, function(err, res, body) {

        // handle error
        if(err) { callback(err); return; }
        if(res.statusCode != 200) { callback(res); return; }

        // convert http body to javascript object
        var jsonBody = JSON.parse(body);
        if(!jsonBody) { 
            callback({message: errorMessage.parseBody, response: res});
            return;
        }

        // valid data
        if(!jsonBody.data || !jsonBody.data.movies) { 
            callback({message: 'data.movies not in body', response: res}); 
            return; 
        }

        // convert yts item
        var movies = convertYtsMovie(jsonBody.data.movies);

        // callback with moives received
        callback(null, movies);
    });
}

// count number of movie
// params
//  - selector: condition to match with movie
//  - callback: function will call
//    params
//     - error: error occur during process
//     - size: number of movie match with selector
prototype.size = function(selector, callback) {

    // shorcut to this object
    var self = this;

    // create query params
    var params = {};
    params.limit = 1;
    params.query_term = selector.term || findParams.term;

    // invoke yts api
    request({url: self.api.find, qs: params}, function(err, res, body) {

        // handle error
        if(err) { callback(err); return; }
        if(res.statusCode != 200) { callback(res); return; }

        // convert body to javascript object
        var jsonBody = JSON.parse(body);
        if(!jsonBody) {
            callback({message: errorMessage.parseBody, response: res});
            return;
        }

        // valid data
        if(!jsonBody.data || !jsonBody.data.movie_count) {
            callback({message: 'data.movie not in body', response: res});
            return;
        }

        // callback with number of movie match with selector
        callback(null, jsonBody.data.movie_count);
    });
}

// fine movie by id
// using for find movie by identity of movie
// params
//  - id: movie identity
//  - callback: function will call when api responsed
//    params
//     - error: error if it occur
//     - item: movie with correct identity
prototype.findById = function(id, callback) {

    // short cut to this object
    var self = this;

    // invoke yts api
    // enable result with images and cast
    var params = {movie_id: id, with_images: true, with_cast: true};
    request({url: self.api.findById, qs: params}, function(err, res, body) {

        // handle error
        if(err) { callback(err); return; }
        if(res.statusCode != 200) { callback(res); return; }

        // convert body to javascript object
        var jsonBody = JSON.parse(body);
        if(!jsonBody) { 
            callback({message: errorMessage.parseBody, response: res}); 
            return;
        }

        // valid data property
        if(!jsonBody.data || !jsonBody.data.movie) { 
            callback({message: 'data.movie not in body', response: res});
            return;
        }

        // callback with correct item
        callback(null, jsonBody.data.movie);
    });
};

// export yts movie respository as a module
module.exports = YtsClient;

























